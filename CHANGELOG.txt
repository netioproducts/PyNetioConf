--- Version 0.1.0 ---
- ! Updated firmware update functions to newly reflect the class of the firmware versions the device updates to.
    - This changes the way device updates look in code, now you should assign the return value of `update_firmware()` to
     your original object. Update firmware example has been updated to the new form.
     - This change now makes it so devices keep track of the NetioManager instance they belong to.
     - Adds an update_device(...) method to NetioManager, while use of this isn't encouraged since the device manages
     itself when to update, if you know a device has been updated externally, you can use this to update its class
     instead of initiating it anew.
- Added a pre-made example script for upgrading multiple devices at a time.
- Refactored naming schemes and package import structure to be more readable.
    - Fixes some cyclical references and wrongly assigned hinting tips.
    - Unified the constructors of all versions classes to follow the abstract class they derive from.
- Continiued adding pre-emptive error checking and permission checking in various places.
- Added ElementNotFound exception, raised when filtering list items fails.
- Added InvalidParameterValueError exception, raised when setting invalid parameters in protocol/configuration methods.
- Fixed a firmware update throwing exceptions on certain 4.0.x devices.
- Fixed a bug that disallowed version 2.x.x and 3.x.x firmware devices from being assigned objects.
- Fixed wrong checking of successfully setting protocols if the protocol was being disabled.
- Added new methods to the ESP class devices, their documentation can be found in netio_device.py:
    - set_output_schedule(...)
    - set_output_schedule_by_name(...)
    - get_output_schedule_id(...)
    - get_output_schedule(...)
    - set_output_schedule_state(...)
    - set_system_settings(...)
    - set_periodic_restart(...)
    - locate()
    - get_users()
    - get_user_privileges(...)
    - create_user(...)
    - remove_user(...)
    - get_telnet_api_state()
    - set_telnet_api_state(...)
    - get_netio_push_api_state()
    - set_netio_push_api_state(...)
    - netio_push_api_push_now()
    - get_snmp_api_state()
    - _set_snmp_api_state(...)
    - set_snmp_v1_2_api_state(...)
    - set_snmp_v3_api_state(...)
    - get_rules()
    - get_enabled_rules()
    - get_disabled_rules()
    - get_rule_by_name(...)
    - get_watchdogs()
    - get_enabled_watchdogs()
    - get_disabled_watchdogs()
    - get_watchdog_by_name(...)
    - get_schedules()
    - get_acive_schedules()
    - get_schedule_by_name(...)
    - get_schedule_id(...)
    - get_schedule_names(...)
    - delete_schedule(...)
    - delete_schedule_by_name(...)
    - get_system_info()
    - get_uptime()
    - reset_power_consumption_counters()
    - get_system_log()
    - clear_system_log()
    - get_pabs()
    - get_pab_by_name(...)
    - get_enabled_pabs()
    - get_disbled_pabs()
- Updated required python version in the package config.
- Updated licence to current year.
- Updated readme to reflect changes in this verison and better explain the module to users.
    - Added usage guide for non-developers with the pre-made scripts.
    - Fixed language inconsistencies.
    - Updated example and installation section.

--- Version 0.0.3 ---

- Added connection checking capability to esp_api
- Added network condition checking to firmware updates on ESPDevices
  - Fixes device disconnects of firmware update on devices using Wi-Fi
  - Fixes unresponsive devices after applying certain 5.0.x firmware versions
  - Devices on poor connection networks now wait further for firmware updates
- Fixed communication error during logging out devices after applying firmware update
- Changed MQTT certificate upload path to dynamically load from ws_api responses
  - Fixes MQTT AWS certificate not working in certain cases
- Added error message to ConnectionError exception


--- Version 0.0.2.1 ---

- Added missing docstrings for MQTT methods.
- Fixed misleading method parameters for client key and cert.


--- Verision 0.0.2 ---

- Added base version of 5.0.x firmware support.
  - Implemented new websocket protocol communication for the new firmware.
    - The device now communicates with the updated protocol by default if possible.
    - Importing and exporting configuration now uses this protocol by default.
  - Many functions still fallback to the old API.
  - During this transitional period, both connection types are active.
  - Devices with 5.0.x firmware beta now support HTTPs over both communication types.
  - Fixed device firmware occasionally not updating over Wi-Fi.
- Added the ability to upload MQTT certificates to the device
- Added support for MQTT configuration and connections to AWS IoT.
- NetioManager now properly handles device versions and can create devices with HTTPs.
- Added an example script to update firmware on a device.
- Added an example script to connect a device to Amazon AWS.
